logging {
	level = "debug"
}

prometheus.exporter.self "alloy_check" { }

discovery.relabel "alloy_check" {
	targets = prometheus.exporter.self.alloy_check.targets

	rule {
		target_label = "instance"
		replacement  = constants.hostname
	}

	rule {
		target_label = "alloy_hostname"
		replacement  = constants.hostname
	}

	rule {
		target_label = "job"
		replacement  = "integrations/alloy-check"
	}
}

prometheus.scrape "alloy_check" {
	targets    = discovery.relabel.alloy_check.output
	forward_to = [prometheus.relabel.alloy_check.receiver]

	scrape_interval = "60s"
}

prometheus.relabel "alloy_check" {
	forward_to = [prometheus.remote_write.metrics_service.receiver]

	rule {
		source_labels = ["__name__"]
		regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
		action        = "keep"
	}
}

prometheus.remote_write "metrics_service" {
	endpoint {
		url = "https://prometheus-prod-01-eu-west-0.grafana.net/api/prom/push"

		basic_auth {
			username = env("GRAFANA_CLOUD_REMOTE_WRITE_USERNAME")
			password = env("GRAFANA_CLOUD_REMOTE_WRITE_PASSWORD")
		}
	}
}

prometheus.scrape "pgbouncer_exporter" {
	targets    = [
        {"__address__" = "127.0.0.1:6000"},
    ]

    forward_to = [prometheus.remote_write.metrics_service.receiver]

	job_name   = "integrations/pgbouncer_exporter"

	scrape_interval = "10s"
}
